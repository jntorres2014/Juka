// AudioManager.kt - Versi√≥n MANUAL sin timer autom√°tico
package com.example.juka

import android.Manifest
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.media.MediaRecorder
import android.os.Bundle
import android.speech.RecognitionListener
import android.speech.RecognizerIntent
import android.speech.SpeechRecognizer
import androidx.core.content.ContextCompat
import kotlinx.coroutines.suspendCancellableCoroutine
import java.io.File
import java.util.*
import kotlin.coroutines.resume

sealed class AudioResult {
    data class Success(val transcript: String) : AudioResult()
    data class Error(val message: String, val errorCode: Int? = null) : AudioResult()
    object PermissionDenied : AudioResult()
    object Cancelled : AudioResult()
}

sealed class AudioState {
    object Idle : AudioState()
    object Listening : AudioState()
    object Processing : AudioState()
    data class Error(val message: String) : AudioState()
}

class AudioManager(private val context: Context) {

    private var speechRecognizer: SpeechRecognizer? = null
    private var mediaRecorder: MediaRecorder? = null
    private var isInitialized = false
    private var useFallbackMode = false
    private var currentContinuation: kotlinx.coroutines.CancellableContinuation<AudioResult>? = null

    companion object {
        private const val TAG = "üé§ AudioManager"
    }

    fun initialize(): Boolean {
        return try {
            android.util.Log.d(TAG, "üîß Iniciando AudioManager manual (sin timer)")

            // Verificar si SpeechRecognizer est√° disponible
            val isAvailable = SpeechRecognizer.isRecognitionAvailable(context)
            android.util.Log.d(TAG, "üì± SpeechRecognizer disponible: $isAvailable")

            if (!isAvailable) {
                android.util.Log.w(TAG, "‚ö†Ô∏è SpeechRecognizer no disponible, usando MediaRecorder manual")
                useFallbackMode = true
            } else {
                // Crear SpeechRecognizer
                speechRecognizer?.destroy()
                speechRecognizer = SpeechRecognizer.createSpeechRecognizer(context)
                android.util.Log.d(TAG, "üÜï SpeechRecognizer creado")
                useFallbackMode = false
            }

            isInitialized = true
            android.util.Log.i(TAG, "‚úÖ AudioManager inicializado - Modo: ${if (useFallbackMode) "MediaRecorder Manual" else "SpeechRecognizer"}")
            true
        } catch (e: Exception) {
            android.util.Log.e(TAG, "üí• Error inicializando: ${e.message}", e)
            useFallbackMode = true
            isInitialized = true
            true
        }
    }

    suspend fun startListening(): AudioResult = suspendCancellableCoroutine { continuation ->
        android.util.Log.d(TAG, "üé¨ Iniciando grabaci√≥n MANUAL - Modo: ${if (useFallbackMode) "MediaRecorder" else "SpeechRecognizer"}")

        // Verificar permisos
        if (!hasAudioPermission()) {
            android.util.Log.e(TAG, "üö´ Sin permisos de audio")
            continuation.resume(AudioResult.PermissionDenied)
            return@suspendCancellableCoroutine
        }

        // Verificar inicializaci√≥n
        if (!isInitialized && !initialize()) {
            android.util.Log.e(TAG, "üî• No se pudo inicializar AudioManager")
            continuation.resume(AudioResult.Error("No se pudo inicializar el reconocimiento de voz"))
            return@suspendCancellableCoroutine
        }

        // Guardar referencia para poder cancelar/detener manualmente
        currentContinuation = continuation

        if (useFallbackMode) {
            startManualMediaRecorder(continuation)
        } else {
            startSpeechRecognition(continuation)
        }
    }

    private fun startSpeechRecognition(continuation: kotlinx.coroutines.CancellableContinuation<AudioResult>) {
        try {
            val intent = createSpeechIntent()
            android.util.Log.d(TAG, "üìã Iniciando SpeechRecognizer MANUAL")

            val listener = createRecognitionListener(continuation)
            speechRecognizer?.setRecognitionListener(listener)
            speechRecognizer?.startListening(intent)
            android.util.Log.i(TAG, "üé§ SpeechRecognizer ACTIVO - Mantenete presionado!")

            continuation.invokeOnCancellation {
                try {
                    android.util.Log.d(TAG, "‚ùå Cancelando SpeechRecognizer")
                    speechRecognizer?.cancel()
                    currentContinuation = null
                } catch (e: Exception) {
                    android.util.Log.e(TAG, "Error cancelando SpeechRecognizer: ${e.message}")
                }
            }
        } catch (e: Exception) {
            android.util.Log.e(TAG, "üí• Error iniciando SpeechRecognizer: ${e.message}", e)
            continuation.resume(AudioResult.Error("Error al iniciar reconocimiento: ${e.message}"))
            currentContinuation = null
        }
    }

    private fun startManualMediaRecorder(continuation: kotlinx.coroutines.CancellableContinuation<AudioResult>) {
        try {
            android.util.Log.i(TAG, "üéôÔ∏è Iniciando MediaRecorder MANUAL (sin timer)")

            val audioFile = File(context.cacheDir, "manual_audio_${System.currentTimeMillis()}.m4a")

            mediaRecorder = MediaRecorder().apply {
                setAudioSource(MediaRecorder.AudioSource.MIC)
                setOutputFormat(MediaRecorder.OutputFormat.MPEG_4)
                setAudioEncoder(MediaRecorder.AudioEncoder.AAC)
                setOutputFile(audioFile.absolutePath)
                prepare()
                start()
            }

            android.util.Log.i(TAG, "üé§ GRABACI√ìN MANUAL ACTIVA - Solta cuando termines!")

            continuation.invokeOnCancellation {
                try {
                    android.util.Log.d(TAG, "üö´ Cancelando grabaci√≥n manual")
                    mediaRecorder?.stop()
                    mediaRecorder?.release()
                    mediaRecorder = null
                    audioFile.delete() // Borrar archivo si se cancela
                    currentContinuation = null
                } catch (e: Exception) {
                    android.util.Log.e(TAG, "Error cancelando MediaRecorder: ${e.message}")
                }
            }

            // NO HAY TIMER - LA GRABACI√ìN CONTIN√öA HASTA QUE SE LLAME stopListening()

        } catch (e: Exception) {
            android.util.Log.e(TAG, "üí• Error iniciando MediaRecorder: ${e.message}", e)
            continuation.resume(AudioResult.Error("Error al iniciar grabaci√≥n: ${e.message}"))
            currentContinuation = null
        }
    }

    // ‚úÖ NUEVO: Detener grabaci√≥n manualmente (cuando sueltas el bot√≥n)
    fun stopListening() {
        android.util.Log.d(TAG, "‚èπÔ∏è Deteniendo grabaci√≥n MANUAL")

        if (useFallbackMode) {
            try {
                mediaRecorder?.stop()
                mediaRecorder?.release()
                android.util.Log.i(TAG, "üìÅ Grabaci√≥n completada manualmente")

                // En modo fallback, generar transcripci√≥n simulada
                val mockTranscription = generateMockTranscription()
                android.util.Log.i(TAG, "üìù Transcripci√≥n simulada: '$mockTranscription'")

                currentContinuation?.let { continuation ->
                    if (continuation.isActive) {
                        continuation.resume(AudioResult.Success(mockTranscription))
                    }
                }

                mediaRecorder = null
                currentContinuation = null

            } catch (e: Exception) {
                android.util.Log.e(TAG, "üí• Error deteniendo MediaRecorder: ${e.message}")
                currentContinuation?.let { continuation ->
                    if (continuation.isActive) {
                        continuation.resume(AudioResult.Error("Error procesando audio"))
                    }
                }
                currentContinuation = null
            }
        } else {
            try {
                speechRecognizer?.stopListening()
                android.util.Log.i(TAG, "üõë SpeechRecognizer detenido manualmente")
            } catch (e: Exception) {
                android.util.Log.e(TAG, "Error deteniendo SpeechRecognizer: ${e.message}")
            }
        }
    }

    fun cancelListening() {
        android.util.Log.d(TAG, "‚ùå Cancelando grabaci√≥n")

        if (useFallbackMode) {
            try {
                mediaRecorder?.stop()
                mediaRecorder?.release()
                mediaRecorder = null
            } catch (e: Exception) {
                android.util.Log.e(TAG, "Error cancelando MediaRecorder: ${e.message}")
            }
        } else {
            try {
                speechRecognizer?.cancel()
            } catch (e: Exception) {
                android.util.Log.e(TAG, "Error cancelando SpeechRecognizer: ${e.message}")
            }
        }

        currentContinuation?.let { continuation ->
            if (continuation.isActive) {
                continuation.resume(AudioResult.Cancelled)
            }
        }
        currentContinuation = null
    }

    private fun generateMockTranscription(): String {
        val fishingMockResponses = listOf(
            "Ayer de 7 a 11, 2 pejerreyes de costa con una ca√±a",
            "Hoy pesqu√© tres dorados embarcado con dos ca√±as",
            "El s√°bado saqu√© un surub√≠ grande usando lombriz",
            "Anteayer de 6 a 10, cinco bagres desde la orilla",
            "Esta ma√±ana captur√© dos tarariras con se√±uelos"
        )
        return fishingMockResponses.random()
    }

    private fun createSpeechIntent(): Intent {
        return Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
            putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
            putExtra(RecognizerIntent.EXTRA_LANGUAGE, "es-AR")
            putExtra(RecognizerIntent.EXTRA_LANGUAGE_PREFERENCE, "es-AR")
            putExtra(RecognizerIntent.EXTRA_ONLY_RETURN_LANGUAGE_PREFERENCE, true)
            putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, context.packageName)
            putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, 3)
            // ‚úÖ CONFIGURACI√ìN PARA GRABACI√ìN MANUAL
            putExtra(RecognizerIntent.EXTRA_SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS, 10000L) // 10 seg silencio
            putExtra(RecognizerIntent.EXTRA_SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS, 8000L) // 8 seg posible
            putExtra(RecognizerIntent.EXTRA_SPEECH_INPUT_MINIMUM_LENGTH_MILLIS, 500L) // M√≠nimo 0.5 seg
        }
    }

    private fun createRecognitionListener(
        continuation: kotlinx.coroutines.CancellableContinuation<AudioResult>
    ): RecognitionListener {
        return object : RecognitionListener {
            override fun onReadyForSpeech(params: Bundle?) {
                android.util.Log.i(TAG, "‚úÖ SpeechRecognizer listo - Habl√° cuando quieras")
            }

            override fun onBeginningOfSpeech() {
                android.util.Log.i(TAG, "üó£Ô∏è VOZ DETECTADA - Contin√∫a hablando")
            }

            override fun onRmsChanged(rmsdB: Float) {
                // Opcional: mostrar nivel de audio
            }

            override fun onBufferReceived(buffer: ByteArray?) {
                android.util.Log.v(TAG, "üì° Buffer recibido: ${buffer?.size} bytes")
            }

            override fun onEndOfSpeech() {
                android.util.Log.i(TAG, "üîö Fin de voz detectado - Procesando...")
            }

            override fun onPartialResults(partialResults: Bundle?) {
                try {
                    val partial = partialResults?.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION)
                    android.util.Log.d(TAG, "üîÑ Resultado parcial: ${partial?.firstOrNull()}")
                } catch (e: Exception) {
                    android.util.Log.e(TAG, "Error procesando parciales: ${e.message}")
                }
            }

            override fun onResults(results: Bundle?) {
                try {
                    android.util.Log.i(TAG, "üéâ RESULTADOS FINALES!")

                    val matches = results?.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION)
                    val bestMatch = matches?.firstOrNull()?.trim()

                    android.util.Log.i(TAG, "üèÜ TRANSCRIPCI√ìN: '$bestMatch'")

                    if (!bestMatch.isNullOrBlank()) {
                        if (continuation.isActive) {
                            continuation.resume(AudioResult.Success(bestMatch))
                        }
                    } else {
                        if (continuation.isActive) {
                            continuation.resume(AudioResult.Error("No se entendi√≥ el audio"))
                        }
                    }
                    currentContinuation = null
                } catch (e: Exception) {
                    android.util.Log.e(TAG, "üí• Error procesando resultados: ${e.message}")
                    if (continuation.isActive) {
                        continuation.resume(AudioResult.Error("Error procesando audio: ${e.message}"))
                    }
                    currentContinuation = null
                }
            }

            override fun onError(error: Int) {
                val errorMessage = getErrorMessage(error)
                android.util.Log.e(TAG, "‚ùå ERROR: $errorMessage ($error)")

                if (continuation.isActive) {
                    continuation.resume(AudioResult.Error(errorMessage, error))
                }
                currentContinuation = null
            }

            override fun onEvent(eventType: Int, params: Bundle?) {
                android.util.Log.v(TAG, "üé≠ Evento: $eventType")
            }
        }
    }

    private fun getErrorMessage(errorCode: Int): String {
        return when (errorCode) {
            SpeechRecognizer.ERROR_AUDIO -> "Error de audio. ¬øFunciona el micr√≥fono?"
            SpeechRecognizer.ERROR_CLIENT -> "Error del cliente. Intent√° de nuevo."
            SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS -> "Sin permisos de micr√≥fono."
            SpeechRecognizer.ERROR_NETWORK -> "Sin internet. Necesita conexi√≥n."
            SpeechRecognizer.ERROR_NETWORK_TIMEOUT -> "Timeout de red. Verific√° conexi√≥n."
            SpeechRecognizer.ERROR_NO_MATCH -> "No se entendi√≥. Habl√° m√°s claro."
            SpeechRecognizer.ERROR_RECOGNIZER_BUSY -> "Reconocedor ocupado. Esper√°."
            SpeechRecognizer.ERROR_SERVER -> "Error del servidor. Intent√° despu√©s."
            SpeechRecognizer.ERROR_SPEECH_TIMEOUT -> "No detect√© voz. Habl√° m√°s fuerte."
            else -> "Error desconocido ($errorCode)."
        }
    }

    private fun hasAudioPermission(): Boolean {
        return ContextCompat.checkSelfPermission(
            context,
            Manifest.permission.RECORD_AUDIO
        ) == PackageManager.PERMISSION_GRANTED
    }

    fun destroy() {
        try {
            android.util.Log.d(TAG, "üßπ Destruyendo AudioManager")
            speechRecognizer?.destroy()
            speechRecognizer = null

            mediaRecorder?.release()
            mediaRecorder = null

            currentContinuation = null
            isInitialized = false
            android.util.Log.d(TAG, "‚úÖ AudioManager destruido")
        } catch (e: Exception) {
            android.util.Log.e(TAG, "üí• Error destruyendo: ${e.message}")
        }
    }
}