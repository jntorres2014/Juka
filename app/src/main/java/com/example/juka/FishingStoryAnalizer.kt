
package com.example.huka
import java.text.SimpleDateFormat
import java.util.*
import java.io.File
import android.app.Application

data class FishingStoryAnalysis(
    val totalFish: Int,
    val speciesFound: List<SpeciesCatch>,
    val estimatedDuration: String?,
    val location: String?,
    val techniques: List<String>,
    val baits: List<String>,
    val timeOfDay: String?,
    val weather: String?,
    val hasSuccessIndicators: Boolean,
    val storyType: String // "exitosa", "regular", "mala", "t√©cnica"
)

data class SpeciesCatch(
    val species: String,
    val quantity: Int,
    val sizeIndicators: List<String> = emptyList(),
    val confidence: Double // 0.0 - 1.0
)

class FishingStoryAnalyzer(private val application: Application) {

    private val fishDatabase = FishDatabase()
    private val analysisLogFile = File(application.filesDir, "story_analysis_log.txt")

    // üêü Diccionario de especies con sin√≥nimos y variaciones
    private val speciesPatterns = mapOf(
        "dorado" to listOf("dorado", "dorados", "doradito", "doraditos", "salminus", "tigre del r√≠o"),
        "surub√≠" to listOf("surub√≠", "surub√≠s", "surubi", "surubis", "pintado", "pintados", "pseudoplatystoma"),
        "pac√∫" to listOf("pac√∫", "pac√∫s", "pacu", "pacus", "piaractus"),
        "pejerrey" to listOf("pejerrey", "pejerreyes", "pejerrei", "odontesthes"),
        "tararira" to listOf("tararira", "tarariras", "tarira", "tariras", "hoplias", "dientudo"),
        "s√°balo" to listOf("s√°balo", "s√°balos", "sabalo", "sabalos", "prochilodus"),
        "boga" to listOf("boga", "bogas", "leporinus"),
        "bagre" to listOf("bagre", "bagres", "pimelodus", "gato"),
        "carpa" to listOf("carpa", "carpas", "cyprinus"),
        "trucha" to listOf("trucha", "truchas", "salmo", "arcoiris"),
        "salm√≥n" to listOf("salm√≥n", "salmones", "salmon", "salmones"),
        "mojarra" to listOf("mojarra", "mojarras", "mojarrita", "mojarritas")
    )

    // üî¢ Patrones de n√∫meros y cantidades
    private val numberPatterns = mapOf(
        "cero" to 0, "un" to 1, "una" to 1, "uno" to 1, "dos" to 2, "tres" to 3, "cuatro" to 4,
        "cinco" to 5, "seis" to 6, "siete" to 7, "ocho" to 8, "nueve" to 9, "diez" to 10,
        "once" to 11, "doce" to 12, "quince" to 15, "veinte" to 20, "treinta" to 30
    )

    // üé£ Patrones de t√©cnicas
    private val techniquePatterns = listOf(
        "spinning", "baitcasting", "fly", "mosca", "trolling", "curric√°n", "fondo",
        "correntino", "boya", "flotador", "casting", "jigging", "topwater",
        "superficie", "profundidad", "deriva", "anclado"
    )

    // üéØ Patrones de carnadas
    private val baitPatterns = listOf(
        "lombriz", "lombrices", "cascarudo", "cascarudos", "ma√≠z", "pan", "masa",
        "carnada viva", "mojarrita", "bagrecito", "cucharita", "spinnerbait",
        "jig", "popper", "se√±uelo", "artificial", "cebo", "frutas", "pellets"
    )

    fun analyzeStory(text: String): FishingStoryAnalysis {
        val normalizedText = text.lowercase().trim()

        // 1. Detectar especies y cantidades
        val speciesFound = detectSpeciesAndQuantities(normalizedText)

        // 2. Calcular total de peces
        val totalFish = speciesFound.sumOf { it.quantity }

        // 3. Analizar otros aspectos
        val duration = detectDuration(normalizedText)
        val location = detectLocation(normalizedText)
        val techniques = detectTechniques(normalizedText)
        val baits = detectBaits(normalizedText)
        val timeOfDay = detectTimeOfDay(normalizedText)
        val weather = detectWeather(normalizedText)
        val hasSuccess = detectSuccessIndicators(normalizedText)
        val storyType = classifyStoryType(normalizedText, totalFish, hasSuccess)

        val analysis = FishingStoryAnalysis(
            totalFish = totalFish,
            speciesFound = speciesFound,
            estimatedDuration = duration,
            location = location,
            techniques = techniques,
            baits = baits,
            timeOfDay = timeOfDay,
            weather = weather,
            hasSuccessIndicators = hasSuccess,
            storyType = storyType
        )

        // Guardar an√°lisis para estad√≠sticas
        saveAnalysis(text, analysis)

        return analysis
    }

    private fun detectSpeciesAndQuantities(text: String): List<SpeciesCatch> {
        val foundSpecies = mutableListOf<SpeciesCatch>()

        speciesPatterns.forEach { (species, patterns) ->
            patterns.forEach { pattern ->
                if (text.contains(pattern)) {
                    val quantity = extractQuantityNearSpecies(text, pattern)
                    val sizeIndicators = extractSizeIndicators(text, pattern)
                    val confidence = calculateConfidence(text, pattern, quantity)

                    foundSpecies.add(
                        SpeciesCatch(
                            species = species,
                            quantity = quantity,
                            sizeIndicators = sizeIndicators,
                            confidence = confidence
                        )
                    )
                }
            }
        }

        // Eliminar duplicados y mantener el de mayor confianza
        return foundSpecies
            .groupBy { it.species }
            .map { (_, catches) -> catches.maxByOrNull { it.confidence }!! }
    }

    private fun extractQuantityNearSpecies(text: String, speciesPattern: String): Int {
        val speciesIndex = text.indexOf(speciesPattern)
        if (speciesIndex == -1) return 1

        // Buscar n√∫meros cerca de la especie (¬±30 caracteres)
        val startSearch = maxOf(0, speciesIndex - 30)
        val endSearch = minOf(text.length, speciesIndex + speciesPattern.length + 30)
        val nearbyText = text.substring(startSearch, endSearch)

        // Patrones de cantidad espec√≠ficos para pesca
        val quantityPatterns = listOf(
            Regex("""(\d+)\s*${Regex.escape(speciesPattern)}"""),
            Regex("""${Regex.escape(speciesPattern)}.*?(\d+)"""),
            Regex("""(un|una|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez)\s*${Regex.escape(speciesPattern)}"""),
            Regex("""pesqu[√©e√≠].*?(\d+).*?${Regex.escape(speciesPattern)}"""),
            Regex("""saq[u√©e√≠].*?(\d+).*?${Regex.escape(speciesPattern)}"""),
            Regex("""${Regex.escape(speciesPattern)}.*?(un|una|dos|tres|cuatro|cinco)""")
        )

        quantityPatterns.forEach { pattern ->
            val match = pattern.find(nearbyText)
            if (match != null) {
                val numberStr = match.groupValues[1]

                // Convertir n√∫mero o palabra a entero
                return numberPatterns[numberStr] ?: numberStr.toIntOrNull() ?: 1
            }
        }

        // Indicadores de cantidad m√∫ltiple sin n√∫mero espec√≠fico
        when {
            nearbyText.contains("varios") || nearbyText.contains("algunos") -> return 3
            nearbyText.contains("muchos") || nearbyText.contains("bastantes") -> return 5
            nearbyText.contains("pocos") -> return 2
            nearbyText.contains("nada") || nearbyText.contains("ninguno") -> return 0
            // Si hay plural pero no n√∫mero espec√≠fico
            speciesPattern.endsWith("s") && !speciesPattern.endsWith("is") -> return 2
        }

        return 1 // Por defecto, un pez
    }

    private fun extractSizeIndicators(text: String, speciesPattern: String): List<String> {
        val indicators = mutableListOf<String>()
        val speciesIndex = text.indexOf(speciesPattern)
        if (speciesIndex == -1) return indicators

        val nearbyText = text.substring(
            maxOf(0, speciesIndex - 50),
            minOf(text.length, speciesIndex + speciesPattern.length + 50)
        )

        // Patrones de tama√±o
        val sizePatterns = mapOf(
            "grande" to listOf("grande", "grandote", "enorme", "tremendo", "gigante"),
            "mediano" to listOf("mediano", "medio", "regular", "normal"),
            "chico" to listOf("chico", "peque√±o", "chiquito", "mini"),
            "peso" to listOf("kg", "kilo", "kilos", "gramos", "gr"),
            "longitud" to listOf("cm", "cent√≠metros", "metros", "largo")
        )

        sizePatterns.forEach { (category, patterns) ->
            patterns.forEach { pattern ->
                if (nearbyText.contains(pattern)) {
                    indicators.add(category)
                }
            }
        }

        return indicators.distinct()
    }

    private fun calculateConfidence(text: String, pattern: String, quantity: Int): Double {
        var confidence = 0.5 // Base

        // Aumentar confianza seg√∫n contexto
        if (text.contains("pesqu") || text.contains("saq") || text.contains("captur")) confidence += 0.3
        if (quantity > 0) confidence += 0.1
        if (text.contains(pattern) && text.length > 20) confidence += 0.1

        return minOf(1.0, confidence)
    }

    private fun detectDuration(text: String): String? {
        val durationPatterns = listOf(
            Regex("""(\d+)\s*horas?"""),
            Regex("""(\d+)\s*hs?"""),
            Regex("""todo\s+el\s+d√≠a"""),
            Regex("""ma√±ana\s+completa"""),
            Regex("""tarde\s+completa"""),
            Regex("""desde.*hasta"""),
            Regex("""(\d+)\s+a\s+(\d+)""")
        )

        durationPatterns.forEach { pattern ->
            val match = pattern.find(text)
            if (match != null) {
                return match.value
            }
        }

        return null
    }

    private fun detectLocation(text: String): String? {
        val locationPatterns = listOf(
            "paran√°", "uruguay", "de la plata", "r√≠o", "laguna", "embalse",
            "rosario", "santa fe", "tigre", "concordia", "chascom√∫s",
            "san roque", "iguaz√∫", "delta", "costa", "puerto"
        )

        locationPatterns.forEach { location ->
            if (text.contains(location)) {
                return location
            }
        }

        return null
    }

    private fun detectTechniques(text: String): List<String> {
        return techniquePatterns.filter { technique ->
            text.contains(technique)
        }
    }

    private fun detectBaits(text: String): List<String> {
        return baitPatterns.filter { bait ->
            text.contains(bait)
        }
    }

    private fun detectTimeOfDay(text: String): String? {
        return when {
            text.contains("amanecer") || text.contains("alba") || text.contains("madrugada") -> "amanecer"
            text.contains("ma√±ana") || text.contains("matutino") -> "ma√±ana"
            text.contains("mediod√≠a") || text.contains("siesta") -> "mediod√≠a"
            text.contains("tarde") || text.contains("vespertino") -> "tarde"
            text.contains("atardecer") || text.contains("ocaso") -> "atardecer"
            text.contains("noche") || text.contains("nocturno") -> "noche"
            else -> null
        }
    }

    private fun detectWeather(text: String): String? {
        return when {
            text.contains("sol") || text.contains("soleado") || text.contains("despejado") -> "soleado"
            text.contains("nublado") || text.contains("nube") -> "nublado"
            text.contains("lluvia") || text.contains("llovi√≥") || text.contains("mojado") -> "lluvioso"
            text.contains("viento") || text.contains("ventoso") -> "ventoso"
            text.contains("fr√≠o") || text.contains("fr√≠a") -> "fr√≠o"
            text.contains("calor") || text.contains("caluroso") -> "caluroso"
            else -> null
        }
    }

    private fun detectSuccessIndicators(text: String): Boolean {
        val successWords = listOf(
            "excelente", "buena", "genial", "b√°rbaro", "espectacular",
            "incre√≠ble", "exitosa", "productiva", "muchos", "varios"
        )

        val failureWords = listOf(
            "mala", "terrible", "nada", "sin suerte", "fracaso",
            "malo", "p√©simo", "ninguno", "cero"
        )

        val successCount = successWords.count { text.contains(it) }
        val failureCount = failureWords.count { text.contains(it) }

        return successCount > failureCount
    }

    private fun classifyStoryType(text: String, totalFish: Int, hasSuccess: Boolean): String {
        return when {
            totalFish == 0 && !hasSuccess -> "mala"
            totalFish >= 5 || hasSuccess -> "exitosa"
            text.contains("t√©cnica") || text.contains("carnada") || text.contains("m√©todo") -> "t√©cnica"
            else -> "regular"
        }
    }

    private fun saveAnalysis(originalText: String, analysis: FishingStoryAnalysis) {
        try {
            val timestamp = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date())
            val logEntry = "$timestamp | Total: ${analysis.totalFish} | Especies: ${analysis.speciesFound.size} | Tipo: ${analysis.storyType}\n"
            analysisLogFile.appendText(logEntry)
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    fun buildAnalysisResponse(analysis: FishingStoryAnalysis): String {
        val response = StringBuilder()

        response.append("üìä **An√°lisis de relato de pesca:**\n\n")

        // Resumen de capturas
        if (analysis.totalFish > 0) {
            response.append("üé£ **Total de peces:** ${analysis.totalFish}\n\n")

            if (analysis.speciesFound.isNotEmpty()) {
                response.append("üêü **Especies identificadas:**\n")
                analysis.speciesFound.forEach { catch ->
                    val sizeInfo = if (catch.sizeIndicators.isNotEmpty()) {
                        " (${catch.sizeIndicators.joinToString(", ")})"
                    } else ""
                    response.append("‚Ä¢ ${catch.species}: ${catch.quantity} pez${if (catch.quantity > 1) "es" else ""}$sizeInfo\n")
                }
                response.append("\n")
            }
        } else {
            response.append("üé£ **Jornada sin capturas** - ¬°Pero es parte de la pesca!\n\n")
        }

        // Detalles t√©cnicos
        if (analysis.techniques.isNotEmpty()) {
            response.append("üéØ **T√©cnicas usadas:** ${analysis.techniques.joinToString(", ")}\n")
        }

        if (analysis.baits.isNotEmpty()) {
            response.append("üé£ **Carnadas/Se√±uelos:** ${analysis.baits.joinToString(", ")}\n")
        }

        // Condiciones
        analysis.timeOfDay?.let {
            response.append("‚è∞ **Horario:** $it\n")
        }

        analysis.weather?.let {
            response.append("üå§Ô∏è **Clima:** $it\n")
        }

        analysis.location?.let {
            response.append("üìç **Zona:** $it\n")
        }

        analysis.estimatedDuration?.let {
            response.append("‚è±Ô∏è **Duraci√≥n:** $it\n")
        }

        // Evaluaci√≥n
        response.append("\nüèÜ **Evaluaci√≥n:** ")
        when (analysis.storyType) {
            "exitosa" -> response.append("Buena Pesca! Excelentes resultados ")
            "regular" -> response.append("traqui, buenos momentos de pesca ")
            "mala" -> response.append("D√≠a dif√≠cil, pero as√≠ es la pesca. La pr√≥xima ser√° mejor! ")
            "t√©cnica" -> response.append("Relato t√©cnico interesante, buenos datos üìö")
        }

        return response.toString()
    }

    fun getAnalysisStats(): String {
        return try {
            val totalAnalysis = if (analysisLogFile.exists()) {
                analysisLogFile.readLines().size
            } else 0

            "üìä Relatos analizados: $totalAnalysis"
        } catch (e: Exception) {
            "üìä Estad√≠sticas no disponibles"
        }
    }
}